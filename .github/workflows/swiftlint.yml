name: SwiftLint PR Check

on:
  pull_request:
    paths:
      - '**/*.swift'  # Trigger only on changes to Swift files

jobs:
  swiftlint:
    runs-on: macos-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up SwiftLint
      - name: Set up SwiftLint
        run: brew install swiftlint

      # Step 3: Get the changed files in the PR
      - name: Get changed files
        id: get_files
        run: |
          echo "::set-output name=files::$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '.swift$')"

      # Step 4: Run SwiftLint on the changed files
      - name: Run SwiftLint
        run: |
          changed_files="${{ steps.get_files.outputs.files }}"
          if [ -n "$changed_files" ]; then
            swiftlint lint --path $changed_files
          else
            echo "No Swift files changed."
          fi

      # Step 5: Post SwiftLint results as a PR comment
      - name: Post SwiftLint results to PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the list of changed files
          CHANGED_FILES="${{ steps.get_files.outputs.files }}"

          # Run SwiftLint and capture the result
          if [ -n "$CHANGED_FILES" ]; then
            lint_results=$(swiftlint lint --path $CHANGED_FILES)
          else
            lint_results="No Swift files changed."
          fi

          # Post the comment on the PR (replace if exists)
          PR_NUMBER=${{ github.event.pull_request.number }}
          COMMENT_BODY="**SwiftLint Results** for PR #$PR_NUMBER:\n\n$lint_results"

          # Get the existing comments and find the one with the same body
          existing_comments=$(curl -s \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments")

          # Check if a comment already exists and delete it if found
          comment_id=$(echo "$existing_comments" | jq '.[0].id' | tr -d '"')
          if [ "$comment_id" != "null" ]; then
            curl -s -X DELETE \
              -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/issues/comments/$comment_id"
          fi

          # Post the new comment with the SwiftLint results
          curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{\"body\": \"$COMMENT_BODY\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments"
