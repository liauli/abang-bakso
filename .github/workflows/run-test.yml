name: run-tests

on: [push]

jobs:
  setup:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0' 
          bundler-cache: true
      - name: Install dependencies
        run: bundle install
      - name: Cache Build
        id: cache-build
        uses: actions/cache/save@v3
        with:
          path: ./
          key: ${{ github.sha }}-setup

  test:
    needs: setup  
    runs-on: macos-latest
    steps:
      - uses: actions/cache/restore@v3
        id: restore-build
        with:
          path: ./
          key: ${{ github.sha }}-setup
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0' 
          bundler-cache: true
      - name: Install XcodeGen
        run: brew install xcodegen
      - name: Generate Xcode project
        run: xcodegen generate
      - name: Run Fastlane tests
        run: bundle exec fastlane unit_tests

  sonarcloud:
    name: SonarQube Cloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: xcov to sonar
	run: bash scripts/xccov-to-sonarqube-generic.sh ./ >sonarqube-generic-coverage.xml
      - name: SonarQube Cloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  lint:
    needs: setup 
    runs-on: macos-latest
    steps:
      - uses: actions/cache/restore@v3
        id: restore-build
        with:
          path: ./
          key: ${{ github.sha }}-setup
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0' 
          bundler-cache: true
      - name: Install swiftlint
        run: brew install swiftlint
      - name: Run Fastlane lint
        run: bundle exec fastlane lint
